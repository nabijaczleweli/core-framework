(function (global, factory) {
	if (typeof define === 'function' && define.amd) {
		define(['exports', 'module'], factory);
	} else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
		factory(exports, module);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, mod);
		global.preloader = mod.exports;
	}
})(this, function (exports, module) {
	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var preloader = (function () {
		_createClass(preloader, null, [{
			key: 'getTimestamp',
			value: function getTimestamp() {
				return (window.performance.now || window.performance.webkitNow || Date.now).call(window.performance);
			}
		}]);

		function preloader(onCompl) {
			_classCallCheck(this, preloader);

			this.onComplete = onCompl;
			this.config = {
				cache: true
			};
			this.time = {
				start: 0,
				end: 0
			};
			this.total = 0;
			this.images = [];
			this._queue = [];

			for (var _len = arguments.length, images = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				images[_key - 1] = arguments[_key];
			}

			if (onCompl && images && images.length) {
				this.enqueue.apply(this, images);
				this.preload();
			}
		}

		_createClass(preloader, [{
			key: 'enqueue',
			value: function enqueue() {
				var _queue;

				for (var _len2 = arguments.length, elements = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
					elements[_key2] = arguments[_key2];
				}

				(_queue = this._queue).splice.apply(_queue, [0, 0].concat(_toConsumableArray(elements.map(function (elem) {
					return typeof elem === 'string' ? { source: elem } : elem;
				}))));
				return this;
			}
		}, {
			key: '_finish',
			value: function _finish(index, image) {
				--this.total;
				(this.images.find(function (img) {
					return img.index == index;
				}) || {}).size = {
					width: image.width,
					height: image.heigth
				};

				if (!this.total) {
					this.time.end = preloader.getTimestamp();
					this.onComplete({
						time: Math.round(this.time.end - this.time.start),
						images: this.images
					});
				}
			}
		}, {
			key: 'preload',
			value: function preload(cbk) {
				var _this = this;

				this.onComplete = cbk || this.onComplete;
				this.time.start = preloader.getTimestamp();
				this.total = this._queue.length;
				this._queue.forEach(function (queued) {
					var image = new Image();
					_this.images.push({
						index: _this.images.length,
						image: image,
						size: {
							width: 0,
							height: 0
						}
					});
					image.onload = image.onerror = image.onabort = function () {
						return _this._finish(_this.images.length - 1, image);
					};
					image.src = queued.source + (_this.config.cache ? '' : '?__preloader_cache_invalidator=' + preloader.getTimestamp());
				});
				this._queue.length = 0;
			}
		}, {
			key: 'preloadCSSImages',
			value: function preloadCSSImages(cbk) {
				this.enqueue.apply(this, _toConsumableArray(this._getCSSImages())).preload(cbk);
			}
		}, {
			key: '_getCSSRules',
			value: function _getCSSRules() {
				var allrules = [];
				var collectorRaw = function collectorRaw(rules) {
					Array.from(rules).forEach(function (rule) {
						allrules.push({
							rule: rule,
							selectorText: rule.selectorText || null,
							declaration: rule.cssText || rule.style.cssText
						});

						collector(rule.styleSheet || {});
					});
				};
				var collector = function collector(sheet) {
					return collectorRaw(sheet.rules || sheet.cssRules || []);
				};

				Array.from(document.styleSheets).forEach(function (sheet) {
					collector(sheet);
					(sheet.imports || []).forEach(collector);
				});

				return allrules;
			}
		}, {
			key: '_getCSSImages',
			value: function _getCSSImages() {
				return this._getCSSRules().reduce(function (prev, cur) {
					return prev.concat(cur.declaration.match(/[^(|'"]+.(jpg|jpeg|gif|png|apng|bmp)\)?/ig));
				}, []);
			}
		}]);

		return preloader;
	})();

	module.exports = preloader;
});

//# sourceMappingURL=data:application/json;base64,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LElBQUk7QUFDdkMsa0JBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztPQUMvQyxDQUFDLENBQUM7O0FBRUgsZUFBUyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7TUFDakMsQ0FBQyxDQUFDO0tBQ0gsQ0FBQztBQUNGLFFBQU0sU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFHLEtBQUs7WUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztLQUFBLENBQUM7O0FBRTdFLFNBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssRUFBSTtBQUNqRCxjQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakIsTUFBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQSxDQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN6QyxDQUFDLENBQUM7O0FBRUgsV0FBTyxRQUFRLENBQUM7SUFDaEI7OztVQUVZLHlCQUFHO0FBQ2YsV0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLEdBQUc7WUFBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7S0FBQSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RJOzs7U0E5Rm1CLFNBQVM7OztrQkFBVCxTQUFTIiwiZmlsZSI6InByZWxvYWRlci5lczUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuLy8gQ29weXJpZ2h0IChjKSAyMDE1IG5hYmlqYWN6bGV3ZWxpXG5cbi8vICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSxcbi8vICB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uXG4vLyAgdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsXG4vLyAgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlXG4vLyAgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vICBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuLy8gIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVJcbi8vICBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgcHJlbG9hZGVyIHtcblx0c3RhdGljIGdldFRpbWVzdGFtcCgpIHtcblx0XHRyZXR1cm4gKHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgfHwgd2luZG93LnBlcmZvcm1hbmNlLndlYmtpdE5vdyB8fCBEYXRlLm5vdykuY2FsbCh3aW5kb3cucGVyZm9ybWFuY2UpO1xuXHR9XG5cblx0Y29uc3RydWN0b3Iob25Db21wbCwgLi4uaW1hZ2VzKSB7XG5cdFx0dGhpcy5vbkNvbXBsZXRlID0gb25Db21wbDtcblx0XHR0aGlzLmNvbmZpZyA9IHtcblx0XHRcdGNhY2hlOiB0cnVlLFxuXHRcdH07XG5cdFx0dGhpcy50aW1lID0ge1xuXHRcdFx0c3RhcnQ6IDAsXG5cdFx0XHRlbmQ6IDAsXG5cdFx0fTtcblx0XHR0aGlzLnRvdGFsID0gMDtcblx0XHR0aGlzLmltYWdlcyA9IFtdO1xuXHRcdHRoaXMuX3F1ZXVlID0gW107XG5cblx0XHRpZihvbkNvbXBsICYmIGltYWdlcyAmJiBpbWFnZXMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLmVucXVldWUoLi4uaW1hZ2VzKTtcblx0XHRcdHRoaXMucHJlbG9hZCgpO1xuXHRcdH1cblx0fVxuXG5cdGVucXVldWUoLi4uZWxlbWVudHMpIHtcblx0XHR0aGlzLl9xdWV1ZS5zcGxpY2UoMCwgMCwgLi4uZWxlbWVudHMubWFwKGVsZW0gPT4gKCh0eXBlb2YgZWxlbSA9PT0gJ3N0cmluZycpID8ge3NvdXJjZTogZWxlbX0gOiBlbGVtKSkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X2ZpbmlzaChpbmRleCwgaW1hZ2UpIHtcblx0XHQtLXRoaXMudG90YWw7XG5cdFx0KHRoaXMuaW1hZ2VzLmZpbmQoaW1nID0+IGltZy5pbmRleCA9PSBpbmRleCkgfHwge30pLnNpemUgPSB7XG5cdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWd0aCxcblx0XHR9O1xuXG5cdFx0aWYoIXRoaXMudG90YWwpIHtcdFxuXHRcdFx0dGhpcy50aW1lLmVuZCA9IHByZWxvYWRlci5nZXRUaW1lc3RhbXAoKTtcblx0XHRcdHRoaXMub25Db21wbGV0ZSh7XG5cdFx0XHRcdHRpbWU6IE1hdGgucm91bmQodGhpcy50aW1lLmVuZCAtIHRoaXMudGltZS5zdGFydCksXG5cdFx0XHRcdGltYWdlczogdGhpcy5pbWFnZXMsXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRwcmVsb2FkKGNiaykge1xuXHRcdHRoaXMub25Db21wbGV0ZSA9IGNiayB8fCB0aGlzLm9uQ29tcGxldGU7XG5cdFx0dGhpcy50aW1lLnN0YXJ0ID0gcHJlbG9hZGVyLmdldFRpbWVzdGFtcCgpO1xuXHRcdHRoaXMudG90YWwgPSB0aGlzLl9xdWV1ZS5sZW5ndGg7XG5cdFx0dGhpcy5fcXVldWUuZm9yRWFjaChxdWV1ZWQgPT4ge1xuXHRcdFx0bGV0IGltYWdlID0gbmV3IEltYWdlKCk7XG5cdFx0XHR0aGlzLmltYWdlcy5wdXNoKHtcblx0XHRcdFx0aW5kZXg6IHRoaXMuaW1hZ2VzLmxlbmd0aCxcblx0XHRcdFx0aW1hZ2UsXG5cdFx0XHRcdHNpemU6IHtcblx0XHRcdFx0XHR3aWR0aDogMCxcblx0XHRcdFx0XHRoZWlnaHQ6IDAsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHRcdGltYWdlLm9ubG9hZCA9IGltYWdlLm9uZXJyb3IgPSBpbWFnZS5vbmFib3J0ID0gKCgpID0+IHRoaXMuX2ZpbmlzaCh0aGlzLmltYWdlcy5sZW5ndGggLSAxLCBpbWFnZSkpO1xuXHRcdFx0aW1hZ2Uuc3JjID0gcXVldWVkLnNvdXJjZSArICh0aGlzLmNvbmZpZy5jYWNoZSA/ICcnIDogKCc/X19wcmVsb2FkZXJfY2FjaGVfaW52YWxpZGF0b3I9JyArIHByZWxvYWRlci5nZXRUaW1lc3RhbXAoKSkpO1xuXHRcdH0pO1xuXHRcdHRoaXMuX3F1ZXVlLmxlbmd0aCA9IDA7XG5cdH1cblxuXHRwcmVsb2FkQ1NTSW1hZ2VzKGNiaykge1xuXHRcdHRoaXMuZW5xdWV1ZSguLi50aGlzLl9nZXRDU1NJbWFnZXMoKSkucHJlbG9hZChjYmspO1xuXHR9XG5cblx0X2dldENTU1J1bGVzKCkge1xuXHRcdGNvbnN0IGFsbHJ1bGVzID0gW107XG5cdFx0Y29uc3QgY29sbGVjdG9yUmF3ID0gcnVsZXMgPT4ge1xuXHRcdFx0QXJyYXkuZnJvbShydWxlcykuZm9yRWFjaChydWxlID0+IHtcblx0XHRcdFx0YWxscnVsZXMucHVzaCh7XG5cdFx0XHRcdFx0cnVsZSxcblx0XHRcdFx0XHRzZWxlY3RvclRleHQ6IHJ1bGUuc2VsZWN0b3JUZXh0IHx8IG51bGwsXG5cdFx0XHRcdFx0ZGVjbGFyYXRpb246IHJ1bGUuY3NzVGV4dCB8fCBydWxlLnN0eWxlLmNzc1RleHQsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGNvbGxlY3RvcihydWxlLnN0eWxlU2hlZXQgfHwge30pO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0XHRjb25zdCBjb2xsZWN0b3IgPSBzaGVldCA9PiBjb2xsZWN0b3JSYXcoc2hlZXQucnVsZXMgfHwgc2hlZXQuY3NzUnVsZXMgfHwgW10pO1xuXG5cdFx0QXJyYXkuZnJvbShkb2N1bWVudC5zdHlsZVNoZWV0cykuZm9yRWFjaChzaGVldCA9PiB7XG5cdFx0XHRjb2xsZWN0b3Ioc2hlZXQpO1xuXHRcdFx0KHNoZWV0LmltcG9ydHMgfHwgW10pLmZvckVhY2goY29sbGVjdG9yKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBhbGxydWxlcztcblx0fVxuXG5cdF9nZXRDU1NJbWFnZXMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldENTU1J1bGVzKCkucmVkdWNlKChwcmV2LCBjdXIpID0+IHByZXYuY29uY2F0KGN1ci5kZWNsYXJhdGlvbi5tYXRjaCgvW14ofCdcIl0rLihqcGd8anBlZ3xnaWZ8cG5nfGFwbmd8Ym1wKVxcKT8vaWcpKSwgW10pOyAgLy8gZm9ybWF0cyBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbXBhcmlzb25fb2Zfd2ViX2Jyb3dzZXJzI0ltYWdlX2Zvcm1hdF9zdXBwb3J0XG5cdH1cbn1cblxuLypcbiAgICAgICAgICAgICAgICBnZXRDc3NJbWFnZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLmdldENzc1J1bGVzKCksIGkgPSBydWxlcy5sZW5ndGgsIGltYWdlcyA9IFtdLCByZWdleCA9IG5ldyBSZWdFeHAoXCJbXih8J1xcXCJdKy4oZ2lmfGpwZ3xqcGVnfHBuZylcXFxcKT9cIiwgXCJpZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZyA9IHJ1bGVzW2ldLmRlY2xhcmF0aW9uLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWcgJiYgaW1nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgxID09IGltZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzLnB1c2goaW1nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGltZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzLnB1c2goaW1nW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVsb2FkQ3NzSW1hZ2VzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2VzID0gdGhpcy5nZXRDc3NJbWFnZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWV1ZShpbWFnZXMpLnByZWxvYWQoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0Q3NzUnVsZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IFtdLCBkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgIHZhciBDb2xsZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXM6IGZ1bmN0aW9uKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBydWxlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJ1bGUtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZTogcnVsZXNbcnVsZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvclRleHQ6ICFydWxlc1tydWxlXS5zZWxlY3RvclRleHQgPyBudWxsIDogcnVsZXNbcnVsZV0uc2VsZWN0b3JUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb246IHJ1bGVzW3J1bGVdLmNzc1RleHQgPyBydWxlc1tydWxlXS5jc3NUZXh0IDogcnVsZXNbcnVsZV0uc3R5bGUuY3NzVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzeW1saW5rID0gcnVsZXNbcnVsZV0uc3R5bGVTaGVldCB8fCBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ltbGluaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29sbGVjdC5ydWxlcyhzeW1saW5rLmNzc1J1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGVldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlczogZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ucnVsZXMgfHwgZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0uY3NzUnVsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0czogZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0uaW1wb3J0cyB8fCBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxlY3QucnVsZXMoc2hlZXQucnVsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHNoZWV0LmltcG9ydHMubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb2xsZWN0LnJ1bGVzKHNoZWV0LmltcG9ydHNbeF0ucnVsZXMgfHwgc2hlZXQuaW1wb3J0c1t4XS5jc3NSdWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oKVxuICAgIH0pOyovXG5cbiJdfQ==